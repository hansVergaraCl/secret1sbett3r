{"version":3,"sources":["components/decrypt-card/index.jsx","components/decrypt-card/rabbit.js","components/encrypt-card/index.jsx","components/home/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["DecryptCard","passwordEncryptRef","useRef","secretPhraseRef","useState","btnDisabled","setBtnDisabled","type","setType","passwordEncrypt","setPasswordEncrypt","secretPhrase","setSecretPhrase","visibleModal","setVisibleModal","useToasts","setToast","passwordDecrypt","setPasswordDecrypt","selectInitialValue","setSelectInitialValue","useEffect","closeHandler","event","resetFormValues","current","value","hoverable","width","h4","placeholder","onChange","target","ref","Password","val","Option","h","align","onClick","originalText","CryptoJS","AES","decrypt","toString","enc","Utf8","console","log","length","text","error","decrypted","chars","decryptedArr","split","push","String","fromCharCode","parseInt","splice","join","rabbitDecrypt","Rabbit","TripleDES","RC4Drop","warn","disabled","visible","onClose","Title","Content","label","Action","passive","navigator","clipboard","writeText","then","setTimeout","EncryptCard","pwdRef","privatePhraseRef","selectRef","pwd","setPwd","privatePhrase","setPrivatePhrase","e","pwdEncrypt","encrypt","pwdRabit","pwdTripleDES","pwdTripleRC4","style","wordBreak","whiteSpace","Home","Header","Container","gap","justify","height","xs","sm","App","themeType","setThemeType","last","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.39348f30.chunk.js","sourcesContent":["import CryptoJS from \"crypto-js\";\nimport { useState, useEffect, useRef } from \"react\";\nimport {\n  Card,\n  Text,\n  Input,\n  Spacer,\n  Select,\n  Button,\n  Modal,\n  Note,\n  useToasts,\n} from \"@geist-ui/react\";\nimport { rabbitDecrypt } from \"./rabbit\";\n\nconst DecryptCard = () => {\n  const passwordEncryptRef = useRef(null);\n  const secretPhraseRef = useRef(null);\n  const [btnDisabled, setBtnDisabled] = useState(true);\n  const [type, setType] = useState(null);\n  const [passwordEncrypt, setPasswordEncrypt] = useState(null);\n  const [secretPhrase, setSecretPhrase] = useState(null);\n  const [visibleModal, setVisibleModal] = useState(false);\n  // eslint-disable-next-line no-unused-vars\n  const [toasts, setToast] = useToasts();\n  const [passwordDecrypt, setPasswordDecrypt] = useState(null);\n  const [selectInitialValue, setSelectInitialValue] = useState(null);\n\n  useEffect(() => {\n    if (type) {\n      setSelectInitialValue(type);\n    }\n    if (type && passwordEncrypt && secretPhrase) {\n      setBtnDisabled(false);\n    } else {\n      setBtnDisabled(true);\n    }\n  }, [type, passwordEncrypt, secretPhrase]);\n\n  useEffect(() => {\n    if (passwordDecrypt) {\n      setVisibleModal(true);\n    }\n  }, [passwordDecrypt]);\n\n  const decryptPassword = () => {\n    switch (type) {\n      case \"1\":\n        try {\n          const decrypt = CryptoJS.AES.decrypt(passwordEncrypt, secretPhrase);\n          const originalText = decrypt.toString(CryptoJS.enc.Utf8);\n          console.log(originalText.length);\n          if (originalText.length === 0) {\n            setToast({ text: \"Private phrase is not valid.\", type: \"error\" });\n          } else {\n            setPasswordDecrypt(originalText);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n\n        break;\n\n      case \"2\":\n        try {\n          const decrypt = CryptoJS.Rabbit.decrypt(\n            passwordEncrypt,\n            secretPhrase\n          );\n          const originalText = rabbitDecrypt(decrypt);\n          if (originalText.length === 0) {\n            setToast({ text: \"Private phrase is not valid.\", type: \"error\" });\n          } else {\n            setPasswordDecrypt(originalText);\n          }\n        } catch (error) {\n          console.error(error);\n        }\n        break;\n      case \"3\":\n        try {\n          const decrypt = CryptoJS.TripleDES.decrypt(\n            passwordEncrypt,\n            secretPhrase\n          );\n          // const originalText = rabbitDecrypt(decrypt);\n          const originalText = decrypt.toString(CryptoJS.enc.Utf8);\n          if (originalText.length === 0) {\n            setToast({ text: \"Private phrase is not valid.\", type: \"error\" });\n          } else {\n            setPasswordDecrypt(originalText);\n          }\n        } catch (error) {\n          setToast({ text: \"Private phrase is not valid.\", type: \"error\" });\n          console.error(error);\n        }\n        break;\n      case \"4\":\n        try {\n          const decrypt = CryptoJS.RC4Drop.decrypt(\n            passwordEncrypt,\n            secretPhrase\n          );\n          // const originalText = rabbitDecrypt(decrypt);\n          const originalText = decrypt.toString(CryptoJS.enc.Utf8);\n          if (originalText.length === 0) {\n            setToast({ text: \"Private phrase is not valid.\", type: \"error\" });\n          } else {\n            setPasswordDecrypt(originalText);\n          }\n        } catch (error) {\n          setToast({ text: \"Private phrase is not valid.\", type: \"error\" });\n          console.error(error);\n        }\n        break;\n      default:\n        console.warn(\"Algoritmo no definido.\");\n        break;\n    }\n  };\n\n  const closeHandler = (event) => {\n    setVisibleModal(false);\n    resetFormValues();\n  };\n\n  const copyKeyToClipboard = () => {\n    navigator.clipboard.writeText(passwordDecrypt).then(() => {\n      setToast({ text: \"Encrypt key copied to clipboard.\" });\n      setTimeout(() => {\n        setVisibleModal(false);\n        resetFormValues();\n      }, 100);\n    });\n  };\n\n  const resetFormValues = () => {\n    setBtnDisabled(true);\n    passwordEncryptRef && (passwordEncryptRef.current.value = \"\");\n    secretPhraseRef && (secretPhraseRef.current.value = \"\");\n    setSelectInitialValue(null);\n  };\n\n  return (\n    <>\n      <Card hoverable width=\"100%\">\n        <Text h4>Decrypt</Text>\n        <p>Decrypt everything you have hidden.</p>\n        <Input\n          width=\"100%\"\n          placeholder=\"Text to decrypt\"\n          onChange={(event) => setPasswordEncrypt(event.target.value)}\n          ref={passwordEncryptRef}\n        />\n        <Spacer />\n        <Input.Password\n          placeholder=\"Private phrase\"\n          onChange={(event) => setSecretPhrase(event.target.value)}\n          width=\"100%\"\n          ref={secretPhraseRef}\n        />\n        <Spacer />\n        <Select\n          placeholder=\"Type\"\n          onChange={(val) => setType(val)}\n          width=\"100%\"\n          value={() => selectInitialValue}\n        >\n          <Select.Option value=\"1\">AES</Select.Option>\n          <Select.Option value=\"2\">Rabbit</Select.Option>\n          <Select.Option value=\"3\">TripleDES</Select.Option>\n          <Select.Option value=\"4\">RC4Drop</Select.Option>\n        </Select>\n        <Spacer h={2} />\n        <div align=\"end\">\n          <Button\n            type=\"secondary-light\"\n            onClick={decryptPassword}\n            disabled={btnDisabled}\n          >\n            Decrypt!\n          </Button>\n        </div>\n      </Card>\n\n      <Modal visible={visibleModal} onClose={closeHandler}>\n        <Modal.Title>Decrypt Password</Modal.Title>\n        {/* <Modal.Subtitle>This is a modal</Modal.Subtitle> */}\n        <Modal.Content>\n          <Note label={false}>{passwordDecrypt}</Note>\n        </Modal.Content>\n        <Modal.Action passive onClick={() => closeHandler()}>\n          Cancel\n        </Modal.Action>\n        <Modal.Action passive onClick={() => copyKeyToClipboard()}>\n          Copy to Clipboard\n        </Modal.Action>\n      </Modal>\n    </>\n  );\n};\n\nexport default DecryptCard;\n","export const rabbitDecrypt = (decrypted) => {\n  var chars = [],\n    decryptedArr = decrypted.toString().split(\"\");\n  while (decryptedArr.length !== 0) {\n    chars.push(\n      String.fromCharCode(parseInt(decryptedArr.splice(0, 2).join(\"\"), 16))\n    );\n  }\n  return chars.join(\"\");\n};\n","import { useState, useEffect, useRef } from \"react\";\nimport CryptoJS from \"crypto-js\";\nimport {\n  Card,\n  Text,\n  Select,\n  Input,\n  Spacer,\n  Button,\n  Modal,\n  Note,\n  useToasts,\n} from \"@geist-ui/react\";\n\nconst EncryptCard = () => {\n  const pwdRef = useRef(null);\n  const privatePhraseRef = useRef(null);\n  const selectRef = useRef(null);\n  const [btnDisabled, setBtnDisabled] = useState(true);\n  const [type, setType] = useState(0);\n  const [visibleModal, setVisibleModal] = useState(false);\n  const [pwd, setPwd] = useState(null);\n  const [privatePhrase, setPrivatePhrase] = useState(null);\n  const [passwordEncrypt, setPasswordEncrypt] = useState(null);\n  // eslint-disable-next-line no-unused-vars\n  const [toasts, setToast] = useToasts();\n  const [selectInitialValue, setSelectInitialValue] = useState(null);\n\n  useEffect(() => {\n    if (type) {\n      setSelectInitialValue(type);\n    }\n\n    if (pwd && privatePhrase && type > 0) {\n      setBtnDisabled(false);\n    }\n  }, [privatePhrase, pwd, type]);\n\n  useEffect(() => {\n    if (passwordEncrypt) {\n      setVisibleModal(true);\n    }\n  }, [passwordEncrypt]);\n\n  const closeHandler = (event) => {\n    setVisibleModal(false);\n  };\n\n  const selectHandler = (val) => {\n    setType(val);\n  };\n\n  const encrypt = () => {\n    switch (type) {\n      case \"1\":\n        const pwdEncrypt = CryptoJS.AES.encrypt(pwd, privatePhrase).toString();\n        setPasswordEncrypt(pwdEncrypt);\n        break;\n      case \"2\":\n        const pwdRabit = CryptoJS.Rabbit.encrypt(pwd, privatePhrase).toString();\n        setPasswordEncrypt(pwdRabit);\n        break;\n\n      case \"3\":\n        const pwdTripleDES = CryptoJS.TripleDES.encrypt(\n          pwd,\n          privatePhrase\n        ).toString();\n        setPasswordEncrypt(pwdTripleDES);\n        break;\n\n      case \"4\":\n        const pwdTripleRC4 = CryptoJS.RC4Drop.encrypt(\n          pwd,\n          privatePhrase\n        ).toString();\n        setPasswordEncrypt(pwdTripleRC4);\n        break;\n\n      default:\n        break;\n    }\n  };\n\n  const copyKeyToClipboard = () => {\n    navigator.clipboard.writeText(passwordEncrypt).then(() => {\n      resetFormValues();\n      setToast({ text: \"Encrypt key copied to clipboard.\", type: \"success\" });\n      setTimeout(() => {\n        setVisibleModal(false);\n      }, 100);\n    });\n  };\n\n  const closeModal = () => {\n    resetFormValues();\n    setVisibleModal(false);\n  };\n\n  const resetFormValues = () => {\n    setBtnDisabled(true);\n    pwdRef && (pwdRef.current.value = \"\");\n    privatePhraseRef && (privatePhraseRef.current.value = \"\");\n    setSelectInitialValue(null);\n  };\n\n  return (\n    <>\n      <Card hoverable width=\"100%\">\n        <Text h4>Encrypt</Text>\n        <p>Encrypt your passwords and save them anywhere.</p>\n        <Select\n          placeholder=\"Algorithm type\"\n          onChange={selectHandler}\n          width=\"100%\"\n          ref={selectRef}\n          value={() => selectInitialValue}\n        >\n          <Select.Option value=\"1\">AES</Select.Option>\n          <Select.Option value=\"2\">Rabbit</Select.Option>\n          <Select.Option value=\"3\">TripleDES</Select.Option>\n          <Select.Option value=\"4\">RC4Drop</Select.Option>\n        </Select>\n        <br />\n        <Spacer />\n        <Input.Password\n          placeholder=\"Text to encrypt\"\n          onChange={(e) => setPwd(e.target.value)}\n          width=\"100%\"\n          ref={pwdRef}\n        />\n        <br />\n        <Spacer />\n        <Input.Password\n          placeholder=\"Private phrase\"\n          onChange={(e) => setPrivatePhrase(e.target.value)}\n          width=\"100%\"\n          ref={privatePhraseRef}\n        />\n        <Spacer h={2} />\n        <div align=\"start\">\n          <Button\n            type=\"secondary-light\"\n            onClick={() => encrypt()}\n            disabled={btnDisabled}\n          >\n            Ecrypt!\n          </Button>\n        </div>\n      </Card>\n\n      <Modal visible={visibleModal} onClose={closeHandler}>\n        <Modal.Title>Encrypt Password</Modal.Title>\n        {/* <Modal.Subtitle>This is a modal</Modal.Subtitle> */}\n        <Modal.Content>\n          <Note\n            width=\"100%\"\n            style={{ wordBreak: \"break-all\", whiteSpace: \"normal\" }}\n            label={false}\n          >\n            {passwordEncrypt}\n          </Note>\n        </Modal.Content>\n        <Modal.Action passive onClick={() => closeModal()}>\n          Cancel\n        </Modal.Action>\n        <Modal.Action passive onClick={() => copyKeyToClipboard()}>\n          Copy to Clipboard\n        </Modal.Action>\n      </Modal>\n    </>\n  );\n};\n\nexport default EncryptCard;\n","import { Page, Grid } from \"@geist-ui/react\";\nimport DecryptCard from \"../decrypt-card\";\nimport EncryptCard from \"../encrypt-card\";\n\nconst Home = () => {\n  return (\n    <>\n      <Page width=\"850px\">\n        <Page.Header>\n          <h2>Secret 1s bett3r.</h2>\n        </Page.Header>\n        <Page.Content>\n          {/* <h2>Hello, Everyone.</h2>\n          <p>This is a simulated page, you can click anywhere to close it.</p> */}\n\n          <Grid.Container gap={2} justify=\"center\" height=\"100px\">\n            <Grid xs={24} sm={12}>\n              <EncryptCard />\n            </Grid>\n            <Grid xs={24} sm={12}>\n              <DecryptCard />\n            </Grid>\n          </Grid.Container>\n        </Page.Content>\n        {/* <Page.Footer>\n          <h4>Hans Vergara Dev</h4>\n        </Page.Footer> */}\n      </Page>\n    </>\n  );\n};\n\nexport default Home;\n","import \"./App.css\";\nimport { useState } from \"react\";\nimport Home from \"./components/home\";\nimport { GeistProvider, CssBaseline } from \"@geist-ui/react\";\nfunction App() {\n  const [themeType, setThemeType] = useState(\"light\");\n  const switchThemes = () => {\n    setThemeType((last) => (last === \"dark\" ? \"light\" : \"dark\"));\n  };\n  return (\n    <GeistProvider themeType={themeType}>\n      <CssBaseline />\n      <Home onClick={switchThemes} />\n    </GeistProvider>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\nreportWebVitals();\n"],"sourceRoot":""}